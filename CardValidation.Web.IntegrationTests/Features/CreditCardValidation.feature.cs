// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace CardValidation.Web.IntegrationTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CreditCardValidationFeature : object, Xunit.IClassFixture<CreditCardValidationFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Credit Card Validation", "  As a user of the payment API\r\n  I want to validate credit card details\r\n  So th" +
                "at I can ensure only valid payment information is processed", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CreditCardValidation.feature"
#line hidden
        
        public CreditCardValidationFeature(CreditCardValidationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Successful validation of different card types")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Successful validation of different card types")]
        [Xunit.TraitAttribute("Category", "success")]
        [Xunit.InlineDataAttribute("John Doe", "4111111111111111", "12/28", "123", "Visa", new string[0])]
        [Xunit.InlineDataAttribute("Jane Smith", "5511111111111111", "11/29", "456", "MasterCard", new string[0])]
        [Xunit.InlineDataAttribute("J Doe", "371111111111111", "10/30", "7890", "AmericanExpress", new string[0])]
        public async global::System.Threading.Tasks.Task SuccessfulValidationOfDifferentCardTypes(string owner, string number, string date, string cvv, string cardType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "success"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Owner", owner);
            argumentsOfScenario.Add("Number", number);
            argumentsOfScenario.Add("Date", date);
            argumentsOfScenario.Add("Cvv", cvv);
            argumentsOfScenario.Add("CardType", cardType);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Successful validation of different card types", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table1.AddRow(new string[] {
                            "Owner",
                            string.Format("{0}", owner)});
                table1.AddRow(new string[] {
                            "Number",
                            string.Format("{0}", number)});
                table1.AddRow(new string[] {
                            "Date",
                            string.Format("{0}", date)});
                table1.AddRow(new string[] {
                            "Cvv",
                            string.Format("{0}", cvv)});
#line 8
  await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table1, "Given ");
#line hidden
#line 14
  await testRunner.WhenAsync("I request to validate the credit card", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 15
  await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 16
  await testRunner.AndAsync(string.Format("the response body should be \"{0}\"", cardType), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Validation fails due to a single invalid field")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Validation fails due to a single invalid field")]
        [Xunit.TraitAttribute("Category", "failure")]
        [Xunit.InlineDataAttribute("Owner", "John Doe 123", "Wrong owner", new string[0])]
        [Xunit.InlineDataAttribute("Number", "1234567890", "Wrong number", new string[0])]
        [Xunit.InlineDataAttribute("Date", "01/20", "Wrong date", new string[0])]
        [Xunit.InlineDataAttribute("Cvv", "12", "Wrong cvv", new string[0])]
        public async global::System.Threading.Tasks.Task ValidationFailsDueToASingleInvalidField(string field, string invalidValue, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "failure"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Field", field);
            argumentsOfScenario.Add("InvalidValue", invalidValue);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validation fails due to a single invalid field", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 25
  await testRunner.GivenAsync("I have a valid credit card", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 26
  await testRunner.AndAsync(string.Format("the \"{0}\" is \"{1}\"", field, invalidValue), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
  await testRunner.WhenAsync("I request to validate the credit card", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 28
  await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 29
  await testRunner.AndAsync(string.Format("the response should contain the error \"{0}\" for the \"{1}\" field", errorMessage, field), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validation fails when a required field is missing")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Validation fails when a required field is missing")]
        [Xunit.TraitAttribute("Category", "failure")]
        public async global::System.Threading.Tasks.Task ValidationFailsWhenARequiredFieldIsMissing()
        {
            string[] tagsOfScenario = new string[] {
                    "failure"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validation fails when a required field is missing", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 39
  await testRunner.GivenAsync("I have a valid credit card", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 40
  await testRunner.AndAsync("the \"Owner\" field is missing", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 41
  await testRunner.WhenAsync("I request to validate the credit card", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 42
  await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 43
  await testRunner.AndAsync("the response should contain the error \"Owner is required\" for the \"Owner\" field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validation fails and returns all errors")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Validation fails and returns all errors")]
        [Xunit.TraitAttribute("Category", "failure")]
        public async global::System.Threading.Tasks.Task ValidationFailsAndReturnsAllErrors()
        {
            string[] tagsOfScenario = new string[] {
                    "failure"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validation fails and returns all errors", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 47
  await testRunner.GivenAsync("I have a credit card with an invalid \"Date\" of \"13/25\" and an invalid \"Cvv\" of \"1" +
                        "2\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 48
  await testRunner.WhenAsync("I request to validate the credit card", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 49
  await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 50
  await testRunner.AndAsync("the response should contain the error \"Wrong date\" for the \"Date\" field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 51
  await testRunner.AndAsync("the response should contain the error \"Wrong cvv\" for the \"Cvv\" field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CreditCardValidationFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CreditCardValidationFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
